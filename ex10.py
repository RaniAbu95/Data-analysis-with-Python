## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# login: abura# id: 316396787# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# Program: Pandas# Description:# We receive a data file on customers who made various purchases in the store and online site and we do some# manipulation On the table based on the requirment#import matplotlibmatplotlib.use('TkAgg')import pandas as pdimport matplotlib.pyplot as plt# Step 1: Upload the reference file and turn it into a tablereference_file = 'project_data.csv'table = pd.read_csv(reference_file)print("Q2\n")# Step 2: on the column in the table called marital_status Use the unique() function to print the existing unique values# in this columnmarital_status_unique_values = table['marital_status'].unique()print(marital_status_unique_values)# Step 3: According to the results from the previous question, if there are two values that have the same meaning,# combine them into the same value# replace with the functiontable['marital_status'] = table['marital_status'].replace({'Widowed': 'Divorced', 'Widow': 'Divorced'})print("Q4\n")# Step 4: According to the results from the previous question,if there are two values that have the same meaning,# combine them into the same value with the function replace()# in this question I used the map() function instead of replace() functionword_counts = table['educational_level'].value_counts()percentage=word_counts/len(table['educational_level'])*100table['educational_level'] = table['educational_level'].map(percentage)table['educational_level'] = (table['educational_level'] ).astype(str) + '%'print(table)print("Q5\n")#Step 5: use loc and isin to take the single from the table then sort the annual income of the single in descending#order and print thissingles = table.loc[table['marital_status'].isin(['Single'])]singles = singles.sort_values('annual_income', ascending=False)print(singles)print("Q6\n")#Step 6:Add a new column of total purchases in general (This means the amount of online purchases in-store purchases)table['total_purchases'] = table['online_purchases'] + table['store_purchases']print(table)print("Q7\n")# Step 7: Add a column of low, medium and high according to the total number of purchases the person made. If# purchased below For 10 - will be considered low, if between 10 and 20 - will be considered medium, and if bought# above 20 - will be considered highertable['purchase_level'] = pd.cut(table['total_purchases'], bins=[0, 10, 20, float('inf')], labels=['low', 'medium', 'high'])print(table)print("Q8\n")#Step 8: Display a pie-shaped graph by the column of low, medium and high. Add labels to each part of the pietable = pd.DataFrame({'purchase_level': ['low', 'medium', 'high', 'low', 'low', 'medium', 'high']})value_counts = table['purchase_level'].value_counts()labels = value_counts.index.tolist()sizes = value_counts.values.tolist()plt.pie(sizes, labels=labels, autopct='%1.1f%%')plt.axis('equal')plt.show()table = pd.DataFrame({'purchase_level': ['low', 'medium', 'high', 'low', 'low', 'medium', 'high'],                      'values': [10, 20, 30, 40, 50, 60, 70]})print("Q9\n")table = pd.DataFrame({'purchase_level': ['low', 'medium', 'high', 'low', 'low', 'medium', 'high'],                      'values': [10, 20, 30, 40, 50, 60, 70]})grouped_table = table.groupby('purchase_level').agg({'values': ['mean', 'sum']})grouped_table.columns = ['average_values', 'total_income']print(grouped_table)print("Q10\n")# Step 10 A:# Present a graph consisting of two graphs using# will be Y (turn the values into numbers where basic education will be 0 and doctorate will be 4) and the e-axis# will be the person's education (turn the values into numbers X his annual incometable = pd.DataFrame({'education': ['Basic', 'Bachelor', 'Master', 'PhD'],                      'annual_income': [30000, 50000, 70000, 90000]})education_mapping = {'Basic': 0, 'Bachelor': 1, 'Master': 2, 'PhD': 3}fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(6, 8))# First subplot - Education vs. Annual Incomex_values = [education_mapping[edu] for edu in table['education']]y_values = table['annual_income']ax1.scatter(x_values, y_values)ax1.set_xlabel("Education Level")ax1.set_ylabel("Annual Income")ax1.set_xticks(list(education_mapping.values()))ax1.set_xticklabels(list(education_mapping.keys()))ax1.set_title("Education Level vs. Annual Income")#plt.show()# Step 10 B:#The second - axis e# will be the number of his purchases. Add titles. Y when basic education will be 0 and Doctor# will be 3) and axistable = pd.DataFrame({'education': ['Basic', 'Bachelor', 'Master', 'PhD'],                      'total_purchase': [0, 5, 10, 20]})education_mapping = {'Basic': 0, 'Bachelor': 1, 'Master': 2, 'PhD': 3}fig, ax = plt.subplots(figsize=(6, 4))x_values = [education_mapping[edu] for edu in table['education']]y_values = table['total_purchase']ax.scatter(x_values, y_values)ax.set_xlabel("Education Level")ax.set_ylabel("Total Purchase")ax.set_xticks(list(education_mapping.values()))ax.set_xticklabels(list(education_mapping.keys()))ax.set_title("Education Level vs. Total Purchase")plt.show()