## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# login: abura# id: 316396787# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~# Program: Pandas# Description:# 1. Set the seed to 745 and seed the random number generator with 1.# 2. Read the files you received in Python.# 3. Determine the percentage of males in the people table.# 4. Add a new column to the people table with a division into four groups:#    - Group +60: 0.4#    - Group 40-60: 0.3#    - Group 20-40: 0.2#    - Group 0-20: 0.1# 5. The duration of the ride appears in the following format: <days> days, <hours>:<minutes>:<seconds>. Replace <days> with the corresponding number. Change or add characters to match the format.# 6. Take the names column from the people table, turn it into a repeating random list itself (that is, each name will be repeated more than once), and add this column to the cycling table.# 7. Add the repeating random names column to the cycling table.# 8. Merge the two tables into one table.# 9. How many possible boarding stations are there? Print the result.# 10. Divide the table into groups based on the boarding station.# 11. Calculate, for each boarding station, the average duration of rides and the standard deviation.#import randomimport pandas as pdfrom datetime import datetimeimport numpy as np# Step 1: Determine the seed to 745.random.seed(745)# Step 2: Upload the reference files and turn it into tablesreference_file_1 = 'people_list.csv'table1 = pd.read_csv(reference_file_1)reference_file_2 = 'ride_2015.csv'table2 = pd.read_csv(reference_file_2)print(table1)print(table2)# Step 3: Upload the reference files and turn it into tablesgrp=table1.groupby('Sex')print(grp.get_group('Male'))male_count = grp.size()["Male"]row_count = len(table1)print(str((male_count/row_count)*100)+"%")# Step 4: Add a new column to the people table and divide it into 4 groups [+60,40-60 ,20-40 ,0-20]# Define the date formatdate_format = '%d/%m/%Y'# Add new column to the table with "None" valuesnew_column = [None] * 1000table1['Age groups'] = new_columnfor i in table1.index:    date=table1.iloc[i][7]    d=datetime.strptime(date, date_format)    range1=datetime.strptime('19/06/2023', date_format)    if (d <= datetime.strptime('19/06/2023', date_format)) and (d > datetime.strptime('19/06/2003', date_format)):        table1.at[i,"Age groups"]="0-20"    if (d >= datetime.strptime('19/06/1983', date_format)) and (d < datetime.strptime('19/06/2003', date_format)):        table1.at[i, "Age groups"] = "0-40"    if (d >= datetime.strptime('19/06/1963', date_format)) and (d < datetime.strptime('19/06/1983', date_format)):        table1.at[i, "Age groups"] = "40-60"    if d < datetime.strptime('19/06/1963', date_format):        table1.at[i, "Age groups"] = "60+"print(table1)# Step 5: The duration of the ride appears in thousandths of a second. Change a character to a time in the following# format When instead of <>, put the appropriate numbers. ,day<day><hours>:<minutes>:<seconds># The hours, minutes and seconds will appear in 2 digits each# Convert column to days, hours, minutes, and seconds formatprint(table2)table2['Duration (ms)'] = pd.to_timedelta(table2['Duration (ms)'], unit='s')  # Convert to timedeltatable2['Formatted Duration'] = (    table2['Duration (ms)'].dt.days.astype(str) + ' days, ' +    table2['Duration (ms)'].dt.seconds.divmod(3600)[0].astype(int).astype(str).str.zfill(2) + ':' +    table2['Duration (ms)'].dt.seconds.divmod(60)[0].divmod(60)[1].astype(int).astype(str).str.zfill(2) + ':' +    table2['Duration (ms)'].dt.seconds.divmod(60)[1].astype(int).astype(str).str.zfill(2))print(table2)# Step 6&7: Take the names column from the people table, turn it into a repeating random list# itself (that is, each name will be repeated more than once) and add this column to the table# The bike rideprint(table1)# Retrieve the names from the "people" DataFramenames = table1['First Name']# Retrieve all the distinct names from a specific columndistinct_names = table1['First Name'].unique()names = []# Print the distinct namessize = 0for name in distinct_names:    names.append(name)    size += 1table_2_row_count = len(table2)random_names = [None] * table_2_row_countfor j in range(0, table_2_row_count):    random_number = random.randint(0, size - 1)    random_names[j] = distinct_names[random_number]table2['First Name'] = random_namesprint(table2)# Step 8: Union of two DF Merge Allows to merge two tables. It should be given according to which columnres=pd.merge(table1,table2,on='First Name')print(res)# Step 9: How many possible stations are there? Print resultdistinct_names = len(table2['Start station'].unique())print(distinct_names)# Step 10: Divide the table into groups according to the boarding stationprint(table2.groupby("Start station").groups)# Step 11: Calculate for each boarding station what is the average time spent riding from it, what is the standard# deviation.sum = 0grp = table2.groupby('Start station')grp.get_group('17th St & Massachusetts Ave NW')for group, members in grp.groups.items():    print("Boarding Station:", group)    avg_time = 0    group_size = 0    for member in members:        avg_time += member        group_size += 1    avg_time = avg_time/group_size    print("ride average time",avg_time)# Group the rides by 'boarding_station'grp = table2.groupby('Start station')for station in table2['Start station'].unique():    # Get the group for the specified station    station_group = grp.get_group(station)    # Calculate the standard deviation for the specific station    station_std_deviation = station_group['Duration (ms)'].std()    # Print the result    print("Standard Deviation for Station", station, ":", station_std_deviation)